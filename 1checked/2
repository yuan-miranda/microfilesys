import os

# command flags
command_flags = {
    "write":  ["-we", "--write-end",
               "-ws", "--write-specific"],
    "modify": ["-ms", "--modify-specific",
               "-ma", "--modify-all",
               "-mas", "--modify-all-specific"],
    "remove": ["-rmsub", "--remove-substring",
               "-rms", "--remove-specific",
               "-rmas", "--remove-all-specific"],
    "clear":  ["-cl", "--clear-line",
               "-ca", "--clear-all"],
    "read":   ["-rl", "--read-line",
               "-ra", "--read-all"],
    "close":  ["-c", "--close"],

    "create": [],
    "open":   ["-r", "--read",
               "-rw", "--read-write",
               "-cp", "--copy"],
    "delete": [],
}

# class of all the commands available
class commands:
    # write function
    def write(user_input):
        try:
            if not user_input[1] in command_flags["write"]:
                print("invalid flag: write only use '" + ', '.join(command_flags["write"]) + "'")
                return

            flag = user_input[1]
            line= user_input[2]

            if len(user_input) == 4 and flag in ["-we", "--write-end"]:
                content = user_input[3]
                print(flag, line, content)

            elif len(user_input) == 5 and flag in ["-ws", "--write-specific"]:
                column = user_input[3]
                content = user_input[4]
                print(flag, line, column, content)

            else:
                if flag in ["-we", "--write-end"]:
                    print("invalid syntax: expected 'write -we line \"content\"'")
                elif flag in ["-ws", "--write-specific"]:
                    print("invalid syntax: expected 'write -ws line column \"content\"'")
                    
        except Exception as error:
            print("An error occured: ", error)
    
    # modify function
    def modify(user_input):
        try:
            if not user_input[1] in command_flags["modify"]:
                print("invalid flag: modify only use '" + ', '.join(command_flags["modify"]) + "'")
                return
            
            flag = user_input[1]
            line = user_input[2]

            if len(user_input) == 5 and flag in ["-ms", "--modify-specific"]:
                column = user_input[3]
                content = user_input[4]
                print(flag, line, column, content)

            elif len(user_input) == 4 and flag in ["-ma", "--modify-all"]:
                content = user_input[3]
                print(flag, line, column, content)
                
            elif len(user_input) == 5 and flag in ["-mas", "--modify-all-specific"]:
                content = user_input[3]
                replace_to = user_input[4]
                print(flag, line, column, content, replace_to)

            else:
                if flag in ["-ms", "--modify-specific"]:
                    print("invalid syntax: expected 'modify -ms line column \"content\"'")
                elif flag in ["-ma", "--modify-all"]:
                    print("invalid syntax: expected 'modify -ma line \"content\"'")
                elif flag in ["-mas", "--modify-all-specific"]:
                    print("invalid syntax: expected 'modify -mas line \"content\" \"replace to\"'")

        except Exception as error:
            print("An error occured: ", error)
    
    # remove function
    def remove(user_input):
        try:            
            if not user_input[1] in command_flags["remove"]:
                print("invalid flag: remove only use '" + ', '.join(command_flags["remove"]) + "'")
                return
            
            flag = user_input[1]
            line = user_input[2]

            if len(user_input) != 4 and flag in ["-rmsub", "--remove-substring"]:
                content = user_input[3]
                print(flag, line, content)

            elif len(user_input) != 4 and flag in ["-rms", "--remove-specific"]:
                column = user_input[3]
                print(flag, line, column)

            elif len(user_input) != 4 and flag in ["-rmas", "--remove-all-specific"]:
                content = user_input[3]
                print(flag, line, column, content)

            else:
                if flag in ["-rmsub", "--remove-substring"]:
                    print("invalid syntax: expected 'remove -rmsub line \"content\"'")
                elif flag in ["-rms", "--remove-specific"]:
                    print("invalid syntax: expected 'remove -rms line column'")
                elif flag in ["-rmas", "--remove-all-specific"]:
                    print("invalid syntax: expected 'remove -rmas line column \"content\"'")

        except Exception as error:
            print("An error occured: ", error)
    
    # clear function
    def clear(user_input):
        try:
            if not user_input[1] in command_flags["clear"]:
                print("invalid flag: clear only use '" + ', '.join(command_flags["clear"]) + "'")
                return

            flag = user_input[1]

            if len(user_input) == 3 and flag in ["-cl", "--clear-line"]:
                line = user_input[2]
                print(flag, line)

            elif len(user_input) == 2 and flag in ["-ca", "--clear-all"]:
                print(flag)

            else:
                if flag in ["-cl", "--clear-line"]:
                    print("invalid syntax: expected 'clear -cl line'")
                elif flag in ["-ca", "--clear-all"]:
                    print("invalid syntax: expected 'clear -ca'")

        except Exception as error:
            print("An error occured: ", error)
    
    # read function
    def read(user_input):
        try:
            if not user_input[1] in command_flags["read"]:
                print("invalid flag: read only use '" + ', '.join(command_flags["read"]) + "'")
                return
            
            flag = user_input[1]

            if len(user_input) == 3 and flag in ["-rl", "--read-line"]:
                line = user_input[2]
                print(flag, line)

            elif len(user_input) == 2 and flag in ["-ra", "--read-all"]:
                print(flag)

            else:
                if flag in ["-rl", "--read-line"]:
                    print("invalid syntax: expected 'read -rl line'")
                elif flag in ["-ra", "--read-all"]:
                    print("invalid syntax: expected 'read -ra'")

        except Exception as error:
            print("An error occured: ", error)
    
    # close function
    def close(user_input):
        try:
            if not user_input[1] in command_flags["close"]:
                print("invalid flag: close only use '" + ', '.join(command_flags["close"]) + "'")
                return
            
            flag = user_input[1]

            if flag in ["-c", "--close"]:
                print(flag)

            else:
                print("invalid syntax: expected 'close -c'")

        except Exception as error:
            print("An error occured: ", error)

    # create function
    def create(user_input):
        try:
            if len(user_input) != 2:
                print("invalid syntax: expexted 'create file.py'")
                return
            
            file = user_input[1]

            if not file in os.listdir():
                print("file already exist")
            else:
                with open(file, "w") as f:
                    print("created")
        except Exception as error:
            print("An error occurred: ", error)
    
    # open function
    def open(user_input):
        if not user_input[1] in command_flags["open"]:
                print("invalid flag: open only use '" + ', '.join(command_flags["open"]) + "'")
                return
        
        flag = user_input[1]
        file = user_input[2]
        if len(user_input) != 3:
            if flag in ["-r", "--read"]:
                    print("invalid syntax: expected 'open -r \"file.py\"'")
            elif flag in ["-rw", "--read-write"]:
                print("invalid syntax: expected 'open -rw \"file.py\"'")
        if file in os.listdir():
            if len(user_input) == 3 and flag in ["-r", "--read"]:
                file_editing(file, "r")

            elif len(user_input) == 3 and flag in ["-rw", "--read-write"]:
                file_editing(file, "r+")

            else:
                if flag in ["-r", "--read"]:
                    print("invalid syntax: expected 'open -r \"file.py\"'")
                elif flag in ["-rw", "--read-write"]:
                    print("invalid syntax: expected 'open -rw \"file.py\"'")

        else:
            print("file doesnt exist")

    # delete function
    def delete(user_input):
        try:
            if len(user_input) != 2:
                print("invalid syntax: expected 'delete file.py'")
                return
                
            file = user_input[1]
            if file in os.listdir():
                os.remove(file)
                print("deleted")
            else:
                print("file doesnt exist")
        except Exception as error:
            print("An error occurred: ", error)

# commands for file editing operation
minor_command_handler = {
    "write":  commands.write,
    "modify": commands.modify,
    "remove": commands.remove,
    "clear":  commands.clear,
    "read":   commands.read,
    "close":  commands.close,
}

# command for file creation
major_command_handler = {
    "create": commands.create,
    "open": commands.open,
    "delete": commands.delete
}

# manage the commands for file editing
def file_editing(filepath, mode):
    try:
        with open(filepath, mode) as f:
            while True:
                # get user input in list form
                user_input = input(f"microfilesys-{filepath}: ").split()

                # check if empty
                if not user_input:
                    continue

                # exit the program
                elif len(user_input) == 1 and user_input[0] in ["quit", "exit"]:
                    exit()
                    
                # (TEMP) error when input lenght is less than 2 to avoid instantiating less than 1+1
                elif len(user_input) < 2:
                    print("not long")
                    continue

                command = user_input[0]
                flag = user_input[1]
                # check the user input with its flag to ensure a command doesnt use the other commands flag
                if command in minor_command_handler:
                    minor_command_handler[command](user_input)
                else:
                    print(f"{user_input} is not a valid file editor command")

    except KeyboardInterrupt:
        print("\nKeyboardInterrupt")
        return
    except Exception as error:
        print("An error occured: ", error)

# manage the commands for file opening, creation and deletetion
def file_manager():
    while True:
        try:
            # get user input in list form
            user_input = input("microfilesys: ").split()
        except KeyboardInterrupt:
            print("\nKeyboardInterrupt")
            exit()

        # check if the input is empty
        if not user_input:
            continue

        command = user_input[0]

        # quit the program
        if len(user_input) == 1 and command in ["quit", "exit"]:
            exit()

        # FIX THE LENGHT ISSUE
        if command in major_command_handler:
            major_command_handler[command](user_input)
        else:
            print("invalid command: '" + ''.join(user_input) + "' is not a valid file manager command")

# prevent from using the program as a import
if __name__ == "__main__":
    file_manager()